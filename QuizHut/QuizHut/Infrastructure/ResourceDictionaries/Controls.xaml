<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:passwordBoxProperties="clr-namespace:QuizHut.Infrastructure.AttachedProperties"
                    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">

    <!--
        Template for defining a 22x22 circular button 
        with a corner radius of 11 and a mouse hover trigger,
        where 80% colour transparency becomes 100%. 
        The content of the button is centred vertically and horizontally.
    -->
    <ControlTemplate x:Key="ButtonTemplate1" TargetType="Button">
        <Border x:Name="btnBorder"
                    Width="22" 
                    Height="22"
                    CornerRadius="11"
                    Background="{TemplateBinding Background}"
                    Opacity="0.8">
            <ContentPresenter VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  Content="{TemplateBinding Content}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="btnBorder" Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        A template for defining a button with rounded edges by 15 points 
        and an animated visual state when the mouse cursor is over: when 
        the mouse is hovered over, the background of the button becomes #E42380 
        and the foreground becomes white, and when the mouse is removed from the element, 
        the button also returns to its original visual state in an animated way. 
        Duration of the animation is 3 milliseconds.
    -->
    <ControlTemplate x:Key="ButtonTemplate2" TargetType="Button">
        <Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="CommonStates">
                    <VisualState Name="Normal">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="backgroundElement" 
                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                            To="{TemplateBinding Background}"
                            Duration="0:0:0.3"/>
                            <ColorAnimation Storyboard.TargetName="foregroundElement" 
                            Storyboard.TargetProperty="(ContentControl.Foreground).(SolidColorBrush.Color)"
                            To="{TemplateBinding Foreground}"
                            Duration="0:0:0.3"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="backgroundElement" 
                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                            To="#E42380" 
                            Duration="0:0:0.3"/>
                            <ColorAnimation Storyboard.TargetName="foregroundElement" 
                            Storyboard.TargetProperty="(ContentControl.Foreground).(SolidColorBrush.Color)"
                            To="White"
                            Duration="0:0:0.3"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="backgroundElement"
                        Background="{TemplateBinding Background}"
                        CornerRadius="15"
                        Cursor="Hand">
                <ContentControl x:Name="foregroundElement"
                                    FontFamily="{StaticResource Manrope}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Content="{TemplateBinding Content}"/>
            </Border>
        </Grid>
    </ControlTemplate>

    <!--Template for button definition with transparent background and no borders-->
    <ControlTemplate x:Key="ButtonTemplate3" TargetType="Button">
        <Border x:Name="btnBorder"
                    Background="Transparent"
                    Cursor="Hand"
                    Opacity="0.8">
            <ContentControl FontFamily="{StaticResource Manrope}"
                                FontSize="{TemplateBinding FontSize}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                Content="{TemplateBinding Content}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="btnBorder"  Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        Template for button definition with rounded edges by 15 points and hand cursor
    -->
    <ControlTemplate x:Key="MainButtonTemplate" TargetType="Button">
        <Border x:Name="btnBorder"
                    CornerRadius="15"
                    Cursor="Hand"
                    Background="{TemplateBinding Background}"
                    Height="{TemplateBinding Height}"
                    Width="{TemplateBinding Width}"
                    Opacity="0.8">
            <ContentControl FontFamily="{StaticResource Manrope}"
                                FontSize="{TemplateBinding FontSize}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                Content="{TemplateBinding Content}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="btnBorder"  Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        Template for button definition with rounded edges by 15 points and hand cursor
    -->
    <ControlTemplate x:Key="MainButtonTemplate2" TargetType="Button">
        <Border x:Name="btnBorder"
                    CornerRadius="15"
                    Cursor="Hand"
                    Background="{TemplateBinding Background}"
                    Height="{TemplateBinding Height}"
                    Width="{TemplateBinding Width}"
                    Opacity="1">
            <ContentControl FontFamily="{StaticResource Manrope}"
                                FontSize="{TemplateBinding FontSize}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                Content="{TemplateBinding Content}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="btnBorder"  Value="0.9" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        A style for TexBox that makes textBox rounded by 15 points, 
        adds a watermark and triggers on the MouseOver and IsKeyboardFocused 
        properties that makes textBox focused in PrimaryActiveColor.
    -->
    <Style x:Key="textBoxStyle" TargetType="TextBox">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryActiveColor}"/>
        <Setter Property="Padding" Value="6 3"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="txtBorder"
                                Background="{TemplateBinding Background}"
                                CornerRadius="15"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden"/>
                            <Label x:Name="WaterMarkerLabel"
                                       Content="{TemplateBinding Tag}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="12"
                                       FontWeight="{TemplateBinding FontWeight}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       Visibility="Collapsed"
                                       Foreground="{StaticResource PrimaryWaterMarkerLabelColor}"
                                       Padding="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility"
                                        TargetName="WaterMarkerLabel"
                                        Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush"
                                        Value="{StaticResource PrimaryActiveColor}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush"
                                        Value="{StaticResource PrimaryActiveColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        A style for PasswordBox that makes passwordBox rounded by 15 points, 
        adds a watermark and triggers on the MouseOver and IsKeyboardFocused 
        properties that makes passwordBox focused in PrimaryActiveColor. Also
        style uses attached property for passwordBox to get password length 
    -->
    <Style x:Key="passwordBoxStyle" TargetType="PasswordBox">
        <Setter Property="passwordBoxProperties:PasswordBoxProperties.IsMonitoring"
              Value="True"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryActiveColor}"/>
        <Setter Property="Padding" Value="6 3"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border x:Name="pswBorder"
                                Background="{TemplateBinding Background}"
                                CornerRadius="15"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden"/>
                            <Label x:Name="WaterMarkerLabel"
                                       Content="{TemplateBinding Tag}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="12"
                                       FontWeight="{TemplateBinding FontWeight}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       Visibility="Collapsed"
                                       Foreground="{StaticResource PrimaryWaterMarkerLabelColor}"
                                       Padding="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="passwordBoxProperties:PasswordBoxProperties.PasswordLength" Value="0" >
                            <Setter Property="Visibility"
                                        TargetName="WaterMarkerLabel"
                                        Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush"
                                        Value="{StaticResource PrimaryActiveColor}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush"
                                        Value="{StaticResource PrimaryActiveColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
        Template remove default MouseOver effect,
        and make topLeft and bottomLeft corners 
        rounded by 13 points
    -->
    <ControlTemplate x:Key="ButtonTemplate4" TargetType="Button">
        <Border x:Name="btnBorder"
                    CornerRadius="13,0,0,13"
                    Opacity="0.8"
                    Background="{TemplateBinding Background}" Cursor="Hand">
            <ContentControl FontFamily="{StaticResource Manrope}"
                                FontSize="{TemplateBinding FontSize}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                Content="{TemplateBinding Content}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="btnBorder" Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Style for defined text block, that have mouseOver trigger to make textBlock content underlied-->
    <Style x:Key="TextBlockStyle1" TargetType="TextBlock">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextDecorations" Value="Underline"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style that defined error message textBlock-->
    <Style x:Key="ErrorTextBlock1" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource Manrope}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryErrorMessageColor}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- Style that defined error message textBlock-->
    <Style x:Key="MainTextBlock" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource Manrope}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Template for menuButton -->
    <Style x:Key="MenuButton" TargetType="RadioButton">
        <!-- Normal button style -->
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="-5,0,0,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource FontColor3}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="4,0,0,0"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource menuOverColor}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>

            <!-- Activated button -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource menuOverColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style defined menu button icon as 'Font.Awesome' icon image -->
    <Style x:Key="MenuButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="35,0,20,0"/>
    </Style>
    
    <!-- Style defined menu button text -->
    <Style x:Key="MenuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="FontFamily" Value="{StaticResource Manrope}"/>
        <Setter Property="FontSize" Value="13.5"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Template for control Button -->
    <Style x:Key="ControlButton" TargetType="Button">
        <!-- Normal button style -->
        <Setter Property="Width" Value="35"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor2}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource menuOverColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style defined control button icon as 'Font.Awesome' icon image -->
    <Style x:Key="MainControlButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="9"/>
        <Setter Property="Height" Value="9"/>
    </Style>

     <!-- Template for user option Button --> 
    <Style x:Key="UserOptionButton" TargetType="Button">
         <!-- Normal button style --> 
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background" Value="{StaticResource ActiveColor3}"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="4"
                            BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
             <!-- Button style on hover --> 
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

     <!-- Style defined user option button icon as 'Font.Awesome' icon image --> 
    <Style x:Key="UserOptionButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="13"/>
        <Setter Property="Height" Value="13"/>
    </Style>

    <!-- Style defined user option button text -->
    <Style x:Key="UserOptionButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="FontFamily" Value="{StaticResource Manrope}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style defined grid control button -->
    <Style x:Key="GridControlButton" TargetType="Button">
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="{StaticResource SecondaryFontColor}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Opacity" Value="0.7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5" Padding="5" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style defined grid button icons -->
    <Style x:Key="GridButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Width" Value="12"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="Foreground" Value="{StaticResource SecondaryFontColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!-- Style defined data grid view 1-->
    <Style x:Key="DataGridStyle1" TargetType="DataGrid">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontFamily" Value="{StaticResource Manrope}"/>
        <Setter Property="ColumnWidth" Value="*"/>
        <Setter Property="RowHeight" Value="35"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
    </Style>
    <Style x:Key="DataGridCellStyle1" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Margin" Value="10,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0" SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridColumnHeaderStyle1" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource DataGridHeadersBackgroundColor1}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryFontColor}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Margin" Value="0,0,0,5"/>
    </Style>
    <Style x:Key="DataGridRowStyle1" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0 4 0 0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryActiveColor}"/>
                <Setter Property="Foreground" Value="{StaticResource SecondaryFontColor}"/>
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryActiveColor}"/>
                <Setter Property="Foreground" Value="{StaticResource SecondaryFontColor}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="White"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>